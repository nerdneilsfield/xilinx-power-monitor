name: Build ARM wheels

on:
  push:
    tags: ["v*"]
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        arch: [aarch64]
        python: [3.8, 3.9, "3.10", 3.11, 3.12, 3.13]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches the full code history for version number determination

      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11" # Controls the Python version for running cibuildwheel

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.23.2

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS_LINUX: ${{ matrix.arch }}
          CIBW_BUILD: cp${{ matrix.python == '3.10' && '310' || matrix.python == '3.11' && '311' || matrix.python == '3.12' && '312' || matrix.python == '3.13' && '313' || matrix.python == '3.8' && '38' || matrix.python == '3.9' && '39' }}-*
          CIBW_SKIP: "*-musllinux*" # Skips musllinux, only builds manylinux
          CIBW_TEST_SKIP: "*" # Skip tests for faster builds
          CIBW_BEFORE_BUILD: pip install pybind11 setuptools wheel
          CIBW_ENVIRONMENT: "CIBW_BUILD=cp${{ matrix.python == '3.10' && '310' || matrix.python == '3.11' && '311' || matrix.python == '3.12' && '312' || matrix.python == '3.13' && '313' || matrix.python == '3.8' && '38' || matrix.python == '3.9' && '39' }}-*"
          # CIBW_REPAIR_WHEEL_COMMAND: "auditwheel repair -w {dest_dir} {wheel} --exclude xlnpwmon.cpython-*-aarch64-linux-gnu.so"
          CIBW_BEFORE_ALL: "pip install --upgrade pip setuptools wheel"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.arch }}-${{ matrix.python }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # If it's a release tag, uploads the packages to GitHub Releases
  release_packages:
    name: Release Ubuntu Packages
    needs: build_wheels
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      # Directly uses the previously built wheel files, no need to download again
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: wheels-*
          merge-multiple: false

      - name: Prepare packages for release
        run: |
          mkdir -p release_packages
          find artifacts -name "*.whl" -exec cp {} release_packages/ \;

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_packages/*.whl

    # 发布到 PyPI
  publish_pypi:
    name: Publish to PyPI
    needs: build_wheels
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/xlnpwmon
    permissions:
      id-token: write

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
